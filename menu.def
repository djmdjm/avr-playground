# Menu definitions for MIDI/CV converter

boilerplate "/* Generated from menu.def -- do not edit */"
boilerplate file "../LICENSE"
#include "constants.h"

# Remove later XXX
boilerplate "#define POLY_LAST 1"
boilerplate "#define POLY_FIRST 2"
boilerplate "#define POLY_LOWEST 3"
boilerplate "#define POLY_HIGHEST 4"
boilerplate "#define POLY_RANDOM 5"
boilerplate "#define CH_EVENT_NOTE 1"
boilerplate "#define CH_EVENT_BEND 2"
boilerplate "#define CH_EVENT_MODWHEEL 3"
boilerplate "#define CH_EVENT_VELOCITY 4"
boilerplate "#define CH_EVENT_CHANNEL_TOUCH 5"
boilerplate "#define MIDI_OMNI 0"
boilerplate "#define CH_RANGE_FULL 1"
boilerplate "#define CH_RANGE_HALF 2"
boilerplate "#define CH_RANGE_FULL_POS 3"
boilerplate "#define CH_RANGE_HALF_POS 4"
boilerplate "#define CH_RANGE_FULL_NEG 5"
boilerplate "#define CH_RANGE_HALF_NEG 6"
boilerplate "int get_evtype(void);"
boilerplate "void set_evtype(int t);"
boilerplate "int get_poly(void);"
boilerplate "void set_poly(int p);"
boilerplate "int get_midich(void);"
boilerplate "void set_midich(int o);"
boilerplate "int get_output_range(void);"
boilerplate "void set_output_range(int p);"
boilerplate "int get_scale(void);"
boilerplate "void set_scale(int s);"
boilerplate "int get_offset(void);"
boilerplate "void set_offset(int o);"
boilerplate "void set_channel(int c);"

menu root {
	submenu label "EDIT CHANNEL" definition "channel_list"
	editable "POLY MODE" {
		display "MODE"
		variable get "get_poly" set "set_poly"
		option define "POLY_LAST" label "last"
		option define "POLY_FIRST" label "first"
		option define "POLY_LOWEST" label "lowest"
		option define "POLY_HIGHEST" label "highest"
		option define "POLY_RANDOM" label "random"
	}
	ask "RESET CONFIG" {
		display "RESET"
		answer "Y" => call "reset_cfg"
		answer "N" => return
	}
	ask "SAVE CONFIG" {
		display "SAVE"
		answer "Y" => call "save_cfg"
		answer "N" => return
	}
	ask "UPDATE FIRMWARE" {
		display "BOOTLDR"
		answer "Y" => call "update_firmware"
		answer "N" => return
	}
}

menu "channel_list" {
	submenu index min 1 max 8 label "CHANNEL" definition "channel" set "set_channel"
}

menu "channel" {
	editable "MIDI EVENT" {
		display "EV. TYPE"
		variable get "get_evtype" set "set_evtype"
		option define "CH_EVENT_NOTE" label "note"
		option define "CH_EVENT_BEND" label "bender"
		option define "CH_EVENT_MODWHEEL" label "modwheel"
		option define "CH_EVENT_VELOCITY" label "velocity"
		option define "CH_EVENT_CHANNEL_TOUCH" label "ch.touch"
	}
	editable "MIDI CHANNEL" {
		display "MIDI CH"
		variable get "get_midich" set "set_midich"
		integer range 1 to 16
		option define "MIDI_OMNI" label "omni"
	}
	editable "OUTPUT RANGE" {
		display "RANGE"
		variable get "get_output_range" set "set_output_range"
		option define "CH_RANGE_FULL" label "-10>+10"
		option define "CH_RANGE_HALF" label "-5>+5"
		option define "CH_RANGE_FULL_POS" label "0>+10"
		option define "CH_RANGE_HALF_POS" label "0>+5"
		option define "CH_RANGE_FULL_NEG" label "-10>0"
		option define "CH_RANGE_HALF_NEG" label "-5>0"
	}
	submenu label "TUNING" definition "tuning"
}

menu "tuning" {
	ask "RESET TUNING" {
		display "RESET"
		answer "Y" => call "reset_tune"
		answer "N" => return
	}
	editable "OFFSET" {
		display "OFFSET"
		variable get "get_offset" set "set_offset"
		integer range -32768 to 32767
	}
	editable "SCALE" {
		display "SCALE"
		variable get "get_scale" set "set_scale"
		integer range -32768 to 32767
	}
}

